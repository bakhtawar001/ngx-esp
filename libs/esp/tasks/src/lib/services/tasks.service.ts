import { Injectable } from '@angular/core';
import { RestClient } from '@esp/common/http';
import { Task, TaskSearch } from '@esp/models';

@Injectable({
  providedIn: 'root',
})
export class TasksService extends RestClient<Task> {
  override url = `tasks`;

  public generate(): Task {
    return {
      Id: 0,
      Name: '',
      Type: '',
      Visibility: '',
      Progress: 0,
      Priority: '',
      Recurrence: '',
      Status: '',
      Description: '',
      DueDate: '',
      StartDate: '',
      AssignedTo: {
        Id: 0,
        Type: '',
        Name: '',
      },
      OwnerName: '',
      UpdateDate: '',
      SendReminder: false,
      OrderId: null,
      OrderNumber: null,
      InHandsDate: '',
      Product: '',
      IsDeleted: false,
      Notes: [],
      CompletedByUserName: '',
      CompletedByUserId: null,
      CompletedDate: '',
      Links: null,
      OwnerId: null,
      TenantId: null,
      IsEditable: true,
      IsVisible: true,
    };
  }

  public toSearchModel(task: Task): TaskSearch {
    return {
      Id: task.Id,
      Name: task.Name,
      Type: task.Type,
      Progress: task.Progress,
      Priority: task.Priority,
      Status: task.Status,
      Description: task.Description,
      UserName: task.AssignedTo.Name,
      UserId: task.AssignedTo.Id,
      TeamId: null,
      TeamName: '',
      PartyIds: null,
      Product: null,
      Companies: [],
      Order: {
        Id: task.OrderId,
        Type: '',
        Number: task.OrderNumber,
        Description: '',
        Supplier: '',
        Product: '',
        Customer: '',
        BillingContact: '',
        ShippingContact: '',
        AcknowledgementContact: '',
        Date: '',
        CreateDate: '',
        UpdateDate: '',
        InHandsDate: '',
        Status: '',
        StatusColor: '',
        Total: null,
        AmountDue: null,
        Salespersons: [],
        ManagingCompanyId: null,
        LineItems: [],
        CurrencyCode: '',
        CurrencySymbol: '',
        CanRequestPayment: true,
        IsSentToQuickbooks: true,
        IsSentToSmartbooks: true,
        IsSentToProfitMaker: true,
        ExternalSentBy: '',
        ExternalSentDate: '',
        ExternalId: '',
        References: [],
        SitaDomain: '',
        ReorderType: '',
        OwnerId: task.OwnerId,
        TenantId: task.TenantId,
        IsEditable: task.IsEditable,
      },
      IsDeleted: task.IsDeleted,
      IsEditable: task.IsEditable,
      Note: task.Notes ? task.Notes[0]?.toString() : '',
      NoteCount: task.Notes?.length ?? 0,
      CompletedByUserName: null,
      OwnerId: task.OwnerId,
      TenantId: task.TenantId,
      VisibilityLevel: task.Visibility,
      TenantName: '',
      TenantAsiNumber: null,
    };
  }
}
